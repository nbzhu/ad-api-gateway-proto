// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: ocean.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Api_QueueLen_FullMethodName             = "/ocean.Api/QueueLen"
	Api_Awemes_FullMethodName               = "/ocean.Api/Awemes"
	Api_VideoCoverSuggest_FullMethodName    = "/ocean.Api/VideoCoverSuggest"
	Api_FileImageAd_FullMethodName          = "/ocean.Api/FileImageAd"
	Api_FileUploadTaskCreate_FullMethodName = "/ocean.Api/FileUploadTaskCreate"
	Api_FileUploadTaskList_FullMethodName   = "/ocean.Api/FileUploadTaskList"
	Api_MicroAppList_FullMethodName         = "/ocean.Api/MicroAppList"
	Api_AssetLinkList_FullMethodName        = "/ocean.Api/AssetLinkList"
	Api_PromotionCreate_FullMethodName      = "/ocean.Api/PromotionCreate"
	Api_ProjectCreate_FullMethodName        = "/ocean.Api/ProjectCreate"
	Api_ReportCustomGet_FullMethodName      = "/ocean.Api/ReportCustomGet"
)

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	QueueLen(ctx context.Context, in *QueueLenReq, opts ...grpc.CallOption) (*QueueLenResp, error)
	Awemes(ctx context.Context, in *AwemesReq, opts ...grpc.CallOption) (*AwemesResp, error)
	VideoCoverSuggest(ctx context.Context, in *VideoCoverSuggestReq, opts ...grpc.CallOption) (*VideoCoverSuggestResp, error)
	FileImageAd(ctx context.Context, in *FileImageAdReq, opts ...grpc.CallOption) (*FileImageAdResp, error)
	FileUploadTaskCreate(ctx context.Context, in *FileUploadTaskCreateReq, opts ...grpc.CallOption) (*FileUploadTaskCreateResp, error)
	FileUploadTaskList(ctx context.Context, in *FileUploadTaskListReq, opts ...grpc.CallOption) (*FileUploadTaskListResp, error)
	MicroAppList(ctx context.Context, in *MicroAppListReq, opts ...grpc.CallOption) (*MicroAppListResp, error)
	AssetLinkList(ctx context.Context, in *AssetLinkListReq, opts ...grpc.CallOption) (*AssetLinkListResp, error)
	PromotionCreate(ctx context.Context, in *PromotionCreateReq, opts ...grpc.CallOption) (*PromotionCreateResp, error)
	ProjectCreate(ctx context.Context, in *ProjectCreateReq, opts ...grpc.CallOption) (*ProjectCreateResp, error)
	ReportCustomGet(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) QueueLen(ctx context.Context, in *QueueLenReq, opts ...grpc.CallOption) (*QueueLenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueueLenResp)
	err := c.cc.Invoke(ctx, Api_QueueLen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Awemes(ctx context.Context, in *AwemesReq, opts ...grpc.CallOption) (*AwemesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AwemesResp)
	err := c.cc.Invoke(ctx, Api_Awemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) VideoCoverSuggest(ctx context.Context, in *VideoCoverSuggestReq, opts ...grpc.CallOption) (*VideoCoverSuggestResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoCoverSuggestResp)
	err := c.cc.Invoke(ctx, Api_VideoCoverSuggest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FileImageAd(ctx context.Context, in *FileImageAdReq, opts ...grpc.CallOption) (*FileImageAdResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileImageAdResp)
	err := c.cc.Invoke(ctx, Api_FileImageAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FileUploadTaskCreate(ctx context.Context, in *FileUploadTaskCreateReq, opts ...grpc.CallOption) (*FileUploadTaskCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUploadTaskCreateResp)
	err := c.cc.Invoke(ctx, Api_FileUploadTaskCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) FileUploadTaskList(ctx context.Context, in *FileUploadTaskListReq, opts ...grpc.CallOption) (*FileUploadTaskListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUploadTaskListResp)
	err := c.cc.Invoke(ctx, Api_FileUploadTaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) MicroAppList(ctx context.Context, in *MicroAppListReq, opts ...grpc.CallOption) (*MicroAppListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MicroAppListResp)
	err := c.cc.Invoke(ctx, Api_MicroAppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AssetLinkList(ctx context.Context, in *AssetLinkListReq, opts ...grpc.CallOption) (*AssetLinkListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssetLinkListResp)
	err := c.cc.Invoke(ctx, Api_AssetLinkList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) PromotionCreate(ctx context.Context, in *PromotionCreateReq, opts ...grpc.CallOption) (*PromotionCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromotionCreateResp)
	err := c.cc.Invoke(ctx, Api_PromotionCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ProjectCreate(ctx context.Context, in *ProjectCreateReq, opts ...grpc.CallOption) (*ProjectCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectCreateResp)
	err := c.cc.Invoke(ctx, Api_ProjectCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ReportCustomGet(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResp)
	err := c.cc.Invoke(ctx, Api_ReportCustomGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility.
type ApiServer interface {
	QueueLen(context.Context, *QueueLenReq) (*QueueLenResp, error)
	Awemes(context.Context, *AwemesReq) (*AwemesResp, error)
	VideoCoverSuggest(context.Context, *VideoCoverSuggestReq) (*VideoCoverSuggestResp, error)
	FileImageAd(context.Context, *FileImageAdReq) (*FileImageAdResp, error)
	FileUploadTaskCreate(context.Context, *FileUploadTaskCreateReq) (*FileUploadTaskCreateResp, error)
	FileUploadTaskList(context.Context, *FileUploadTaskListReq) (*FileUploadTaskListResp, error)
	MicroAppList(context.Context, *MicroAppListReq) (*MicroAppListResp, error)
	AssetLinkList(context.Context, *AssetLinkListReq) (*AssetLinkListResp, error)
	PromotionCreate(context.Context, *PromotionCreateReq) (*PromotionCreateResp, error)
	ProjectCreate(context.Context, *ProjectCreateReq) (*ProjectCreateResp, error)
	ReportCustomGet(context.Context, *ReportReq) (*ReportResp, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServer struct{}

func (UnimplementedApiServer) QueueLen(context.Context, *QueueLenReq) (*QueueLenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueLen not implemented")
}
func (UnimplementedApiServer) Awemes(context.Context, *AwemesReq) (*AwemesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Awemes not implemented")
}
func (UnimplementedApiServer) VideoCoverSuggest(context.Context, *VideoCoverSuggestReq) (*VideoCoverSuggestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoCoverSuggest not implemented")
}
func (UnimplementedApiServer) FileImageAd(context.Context, *FileImageAdReq) (*FileImageAdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileImageAd not implemented")
}
func (UnimplementedApiServer) FileUploadTaskCreate(context.Context, *FileUploadTaskCreateReq) (*FileUploadTaskCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadTaskCreate not implemented")
}
func (UnimplementedApiServer) FileUploadTaskList(context.Context, *FileUploadTaskListReq) (*FileUploadTaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUploadTaskList not implemented")
}
func (UnimplementedApiServer) MicroAppList(context.Context, *MicroAppListReq) (*MicroAppListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MicroAppList not implemented")
}
func (UnimplementedApiServer) AssetLinkList(context.Context, *AssetLinkListReq) (*AssetLinkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetLinkList not implemented")
}
func (UnimplementedApiServer) PromotionCreate(context.Context, *PromotionCreateReq) (*PromotionCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromotionCreate not implemented")
}
func (UnimplementedApiServer) ProjectCreate(context.Context, *ProjectCreateReq) (*ProjectCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectCreate not implemented")
}
func (UnimplementedApiServer) ReportCustomGet(context.Context, *ReportReq) (*ReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCustomGet not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}
func (UnimplementedApiServer) testEmbeddedByValue()             {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	// If the following call pancis, it indicates UnimplementedApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_QueueLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).QueueLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_QueueLen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).QueueLen(ctx, req.(*QueueLenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Awemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwemesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Awemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_Awemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Awemes(ctx, req.(*AwemesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_VideoCoverSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoCoverSuggestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).VideoCoverSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_VideoCoverSuggest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).VideoCoverSuggest(ctx, req.(*VideoCoverSuggestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FileImageAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileImageAdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FileImageAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_FileImageAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FileImageAd(ctx, req.(*FileImageAdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FileUploadTaskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadTaskCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FileUploadTaskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_FileUploadTaskCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FileUploadTaskCreate(ctx, req.(*FileUploadTaskCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_FileUploadTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadTaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).FileUploadTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_FileUploadTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).FileUploadTaskList(ctx, req.(*FileUploadTaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_MicroAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MicroAppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).MicroAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_MicroAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).MicroAppList(ctx, req.(*MicroAppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AssetLinkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetLinkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AssetLinkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_AssetLinkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AssetLinkList(ctx, req.(*AssetLinkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_PromotionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).PromotionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_PromotionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).PromotionCreate(ctx, req.(*PromotionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ProjectCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ProjectCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_ProjectCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ProjectCreate(ctx, req.(*ProjectCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ReportCustomGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ReportCustomGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_ReportCustomGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ReportCustomGet(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocean.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueLen",
			Handler:    _Api_QueueLen_Handler,
		},
		{
			MethodName: "Awemes",
			Handler:    _Api_Awemes_Handler,
		},
		{
			MethodName: "VideoCoverSuggest",
			Handler:    _Api_VideoCoverSuggest_Handler,
		},
		{
			MethodName: "FileImageAd",
			Handler:    _Api_FileImageAd_Handler,
		},
		{
			MethodName: "FileUploadTaskCreate",
			Handler:    _Api_FileUploadTaskCreate_Handler,
		},
		{
			MethodName: "FileUploadTaskList",
			Handler:    _Api_FileUploadTaskList_Handler,
		},
		{
			MethodName: "MicroAppList",
			Handler:    _Api_MicroAppList_Handler,
		},
		{
			MethodName: "AssetLinkList",
			Handler:    _Api_AssetLinkList_Handler,
		},
		{
			MethodName: "PromotionCreate",
			Handler:    _Api_PromotionCreate_Handler,
		},
		{
			MethodName: "ProjectCreate",
			Handler:    _Api_ProjectCreate_Handler,
		},
		{
			MethodName: "ReportCustomGet",
			Handler:    _Api_ReportCustomGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocean.proto",
}
